#Sorting

#Bubble Sort

- scan from left to right and swap
- after every iteration, the next largest item bubbles up and moves to its correct position
- once array is sorted, we can stop iterations

#Time complexity
-----------------------------------------------------------------------
#best case 

passes - O(1)
comparisons - O(n) 

total O(n) - linear time

#worst case

passes O(n)
comparisons O(n)

total is O(n^2) - quadratic time

-----------------------------------------------------------------------


#Selection Sort

- 2 parts
Sorted
Unsorted

- in each pass find the next minimum value and move it to the right place
- we cannot stop the iteration even if the array is sorted


#Time complexity
-----------------------------------------------------------------------
#best case 

passes - O(n)
comparisons - O(n) 

total O(n^2) - quadratic time

#worst case

passes O(n)
comparisons O(n)

total is O(n^2) - quadratic time

-----------------------------------------------------------------------


#Insertion Sort

- every time we get an item, we insert in the right place
- shift the elements to the right and make way for the smaller item on the left

#Time complexity
-----------------------------------------------------------------------
#best case 

iteration - O(n)
shift item - O(1) 

total O(n) - linear time

#worst case

iteration O(n)
shift item O(n)

total is O(n^2) - quadratic time

-----------------------------------------------------------------------


#Merge Sort

- break down array to smaller one and merge later
- divide the array by 2
- recursively divide an array until it is smaller
- need to allocate extra space
- divide by conquer algorithm

#Time complexity
-----------------------------------------------------------------------
#best case 

dividing - O(log n)
merging - O(n) 

total O(n log n) - linear time

space O(n)

#worst case

dividing - O(log n)
merging - O(n) 

total O(n log n) - linear time

space O(n)

-----------------------------------------------------------------------

#Quick Sort

- most widely used
- in place sorting
- pivot elements
- partitioning
- pivot will move to correct position on iteration


#Time complexity
-----------------------------------------------------------------------
#best case 

partitioning - O(n)
no of times - O(log n) 

total - O(n log n)

space - O(log n)

#worst case

partitioning - O(n)
no of times - O(n)




total - O(n^2) 

space - O(log n)
----------------------------------------------------------------------- 

#Pivot Selection

- pick randomly
- use middle index
- Average of first,middle and last item


-----------------------------------------------------------------------
#Non-Comparison Sort

1. Counting Sort
2. Bucket Sort
3. Radix sort


#Counting Sort

- read elements from input array and populate in new count array on their index
- finally read the indexes of count array in order

Time complexity
-----------------------------------------------------------------------
#best case 

populate counts - O(n)
iterate counts - O(k) 

total - O(n+k) => O(n) as k is ignored

space - O(k) - k is the maximum value in the input array

----------------------------------------------------------------------- 

#Time-memory trade off

- allocate extra space to make the program run faster
Counting sort can be used

- when memory is not an issue
- values are positive integers
- most of the values in the range are present
----------------------------------------------------------------------- 

#Bucket Sort

- distribute items in buckets and sort using another algorithm and combine
- we can also sort buckets in parallel
- the more bucket we have the more memory we need

Time complexity
-----------------------------------------------------------------------
#best case 

Distribution - O(n)
iterate buckets - O(k) 
sorting - O(1) - assuming only one item per bucket

#Worst case

Distribution - O(n)
iterate buckets - O(k) 
sorting - O(n^2) - depends on the sorting algorithm as we have more elements in a bucket

total - O(n^2) =>

space - O(n + k) - k is the no of buckets 

----------------------------------------------------------------------- 

#Searching


#Linear Search

- find an element in the array and return its index
- slower than other algorithm

#Time complexity
-----------------------------------------------------------------------
#best case 

- if the target element is the first in the list
O(1)

#Worst case

- if the target element is the last in the list
O(n)

----------------------------------------------------------------------- 

#Binary Search

- faster than linear search but works only on sorted lists
- we need to sort and then do binary search
- we calculate the middle element and narrow down the search by half
- divide and conquer algorithm
- Used to search an element in bounded / finite arrays

-----------------------------------------------------------------------
#Time Complexity

Time Complexity

- O(log n)

Space Complexity

- O(log n)

----------------------------------------------------------------------- 

#Ternary Search

- Divide the list into 3 parts
- slower than ternary search
- 2 pointers mid1 and mid2

partitionSize = (right - left) / 3
mid1 = left + partitionSize
mid2 = right - partitionSize

-----------------------------------------------------------------------
#Time Complexity

Time Complexity

- O(log3 n)

----------------------------------------------------------------------- 

#Jump Search

- We divide a list into few blocks
- we jump to a particular block of the item and then do a linear search
- better than linear but slower than binary search
-----------------------------------------------------------------------
#Time Complexity

Time Complexity

- O(sq(n))

----------------------------------------------------------------------- 

#Exponential Search

- Fix a range and search for the item and double it and go on.
- We do a binary search in that range
- Used to search an element in unbounded /infinite arrays

-----------------------------------------------------------------------
#Time Complexity

Time Complexity

- O(log i) - i is the number of divisions perfomed on the array

----------------------------------------------------------------------- 